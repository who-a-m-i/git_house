【基本数据类型】
除数：
>>> divmod(5,2)  #表示5除以2，返回了商和余数
(2, 1)
>>> divmod(9,2)
(4, 1)
>>> divmod(5.0,2)
(2.0, 1.0)

>>> round(1.234567,2) #表示四舍五入，取小数点后两位
1.23
>>> round(1.234567,3)
1.235
>>> round(10.0/3,4)
3.3333

>>> abs(10)  #求绝对值
10
>>> abs(-10)
10
>>> abs(-1.2)
1.2

>> a = 100
>> b = "free"
>>> print b + repr(a)   #repr(a)与上面的`a`类似
free100 


>>> dos = r"c:\news"  #不产生换行
>>> print dos
c:\news
>>> print r"c:\news\python"
c:\news\python


“+”连接字符串
>>> str1 + str2
'abcdabcde'
>>> str1 + "-->" + str2
'abcd-->abcde'


in
>>> "a" in str1
True
>>> "de" in str1
False
>>> "de" in str2
True


最值
>>> max(str1)
'd'
>>> max(str2)
'e'
>>> min(str1)
'a'


比较
>>> cmp(str1, str2)  # $1 > $2 返回1； $2 > $1 返回 -1 ； $1 = $2 返回 0 。
-1


>>> cmp("123","23") #字符串会先比较前面。小于直接返回结果
-1
>>> cmp(123,23)    #也可以比较整数，这时候就是整数的直接比较了。
1

>>> ord('a')
97
>>> ord('b')
98
>>> ord(' ')
32

>>> chr(97)
'a'
>>> chr(98)
'b'


# 字符串格式化
第一种
>>> "I like %s" % "python"
'I like python'

>>> a = "%d years" % 15
>>> print a
15 years

>>> print "Today's temperature is %.2f" % 12.235  #截取小数点后两位
Today's temperature is 12.23

>>> print "Today's temperature is %+.2f" % 12.235
Today's temperature is +12.23

第二种[推荐使用]
>>> s1 = "I like {}".format("python")
>>> s1
'I like python'
>>> s2 = "Suzhou is more than {} years. {} lives in here.".format(2500, "lin") 
>>> s2
'Suzhou is more than 2500 years. lin lives in here.'

>>> print "Suzhou is more than {year} years. {name} lives in here.".format(year=2500, name="lin") 
Suzhou is more than 2500 years. lin lives in here.

第三种
>>> lang = "python"
>>> print "I love %(program)s"%{"program":lang}
I love python



>>> "python".isalpha()    #字符串全是字母，应该返回True
True
>>> "2python".isalpha()    #字符串含非字母，返回False
False

>>> a = "I LOVE PYTHON" #分割
>>> a.split(" ")
['I', 'LOVE', 'PYTHON']

>>> b = "www.google.com"
>>> b.split(".")
['www', 'google', 'com']


S.strip() 去掉字符串的左右空格
S.lstrip() 去掉字符串的左边空格
S.rstrip() 去掉字符串的右边空格

>>> b=" hello "    #两边有空格
>>> b.strip()
'hello'
>>> b
' hello '

>>> b.lstrip()    #去掉左边的空格
'hello '

>>> b.rstrip()    #去掉右边的空格
' hello'


S.upper() #S中的字母大写
S.lower() #S中的字母小写
S.capitalize() #首字母大写
S.isupper() #S中的字母是否全是大写
S.islower() #S中的字母是否全是小写
S.istitle() #判断每个单词的首字母是否为大写

>>> a = "study python"
>>> b = "STUDY PYTHON"

>>> a.upper()      #将字符串转换为小写
'STUDY PYTHON'
>>> b.lower()      #将字符串转换为小写
'study python'
>>> a.capitalize() #将字符串首字母大写
'Study python'

>>> a.islower()  #判断字符串是否全部为小写
True
>>> b.isupper()  #判断字符串是否全部为大写
True

>>> a = "This is a Book"
>>> a.istitle()
False
>>> b = a.title()     #这样就把所有单词的第一个字母转化为大写
>>> b
'This Is A Book'
>>> b.istitle()       #判断每个单词的第一个字母是否为大写
True


join[拼接]

>>> k = "www.google.com"
>>> l = k.split(".")
>>> l
['www', 'google', 'com']
>>> ".".join(l)
'www.google.com'
>>> "*".join(l)
'www*google*com'


split

>>> s = "I am, writing\npython\tbook on line"
>>> s
'I am, writing\npython\tbook on line'
>>> print s
I am, writing
python  book on line
>>> s.split()
['I', 'am,', 'writing', 'python', 'book', 'on', 'line']



tuple

>>> a =(3)
>>> type(a)
<type 'int'>
>>>
>>>
>>> b=(3,)
>>> type(b)
<type 'tuple'>



dict（字典）
len(d)，返回字典(d)中的键值对的数量
d[key]，返回字典(d)中的键(key)的值
d[key]=value，将值(value)赋给字典(d)中的键(key)
del d[key]，删除字典(d)的键(key)项（将该键值对删除）
key in d，检查字典(d)中是否含有键为key的项


>>> city_code = {"suzhou":"0512", "tangshan":"0315", "hangzhou":"0571"}
>>> " Suzhou is a beautiful city, its area code is %(suzhou)s" % city_code
' Suzhou is a beautiful city, its area code is 0512'


>>> temp = "<html><head><title>%(lang)s<title><body><p>My name is %(name)s.</p></body></head></html>"
>>> my = {"name":"lin", "lang":"python"}
>>> temp % my
'<html><head><title>python<title><body><p>My name is lin.</p></body></head></html>'


copy（字典中，使用copy时，列表在内存中的地址是一样的，所以会被修改。）

>>> x = {"name":"lin", "lang":["python", "java", "c"]}
>>> y = x.copy()
>>> y
{'lang': ['python', 'java', 'c'], 'name': 'lin'}

>>> y["lang"].remove("c")
>>> y
{'lang': ['python', 'java'], 'name': 'lin'}
>>> x
{'lang': ['python', 'java'], 'name': 'lin'}

>>> y["name"] = "laoqi"
>>> y
{'lang': ['python', 'java'], 'name': 'lang'}
>>> x
{'lang': ['python', 'java'], 'name': 'lin'}

>>> id(x["lang"])
3072243276L
>>> id(y["lang"])
3072243276L


深度copy（copy出来的list在内存中的地址不一样）

>>> import copy
>>> z = copy.deepcopy(x)
>>> z
{'lang': ['python', 'java'], 'name': 'qiwsir'}


clear
>>> a = {"name":"qiwsir"}
>>> a.clear()
>>> a
{}

del（删除字典）
>>> del a

get
>>> d
{'lang': 'python'}
>>> d.get("lang")
'python'

setdefault
>>> c.setdefault("name","lin")
'lin'
>>> c.setdefault("name")
'lin'


items
>>> dd
{'lang': 'python', 'web': 'www.gitlab.com', 'name': 'lin'}
>>> dd_kv = dd.items()
>>> dd_kv
[('lang', 'python'), ('web', 'www.gitlab.com'), ('name', 'lin')]



iteritems[可迭代](需要用list转换，才能看到内容)
>>> dd
{'lang': 'python', 'web': 'www.gitlab.com', 'name': 'lin'}
>>> dd_iter = dd.iteritems()
>>> dd_iter
<dictionary-itemiterator object at 0x039BF270>
>>> list(dd_iter)
[('lang', 'python'), ('web', 'www.gitlab.com'), ('name', 'lin')]
>>> dd.keys()
['lang', 'web', 'name']
>>> dd.values()
['python', 'www.gitlab.com', 'lin']


pop(制定key进行删除)
>>> dd
{'lang': 'python', 'web': 'www.itdiffer.com', 'name': 'qiwsir'}
>>> dd.pop("name")
'qiwsir


popitem(随机删除)
>>> dd
{'lang': 'python', 'web': 'www.gitlab.com', 'name': 'lin'}
>>> dd.popitem()
('lang', 'python')
>>> dd.popitem()
('web', 'www.gitlab.com')
>>> dd.popitem()
('name', 'lin')


update
>>> d1
{'lang': 'python'}
>>> d2
{'song': 'kalong'}
>>> d1.update(d2)
>>> d1
{'lang': 'python', 'song': 'kalong'}
>>> d2
{'song': 'kalong'}
>>> d2.update([('name','lin'),('web','gitlab')])
>>> d2
{'web': 'gitlab', 'name': 'lin', 'song': 'kalong'}


has_key
>>> d2
{'web': 'gitlab', 'name': 'lin', 'song': 'kalong'}
>>> d2.has_key("web")
True
>>> d2.has_key("gitlab")
False
>>> d2.has_key("name")
True



能够索引的，如list/str，其中的元素可以重复
可变的，如list/dict，即其中的元素/键值对可以原地修改
不可变的，如str/int，即不能进行原地修改
无索引序列的，如dict，即其中的元素（键值对）没有排列顺序

可哈希即不可变/不可哈希即可变


set（集合）

add

>>> a_set = {'a','i'}  #如果直接创建 a_set = {} python会任务创建是dict而不是set
>>> type(a_set)
<type 'set'>
>>> a_set.add('qiwser')
>>> a_set
set(['a', 'i', 'qiwser'])

>>> b_set = set()
>>> b_set
set([])
>>> b_set = set("python")
>>> b_set
set(['h', 'o', 'n', 'p', 't', 'y'])


update
>>> s1
set(['a', 'b'])
>>> s2
set(['github', 'qiwsir'])
>>> s1.update(s2)
>>> s1
set(['a', 'qiwsir', 'b', 'github'])
>>> s2
set(['github', 'qiwsir'])

>>> s2.update("keke")
>>> s2
set(['k', 'github', 'e', 'qiwsir'])


pop（任意删除一个元素。且pop不能指定元素删除）
>>> b_set
set([1, '[1,2,3]', 'h', 'o', 'n', 'p', 'qiwser', 't', 'y'])
>>> b_set.pop()
1
>>> b_set.pop()
'[1,2,3]'
>>> b_set.pop()
'h'
>>> b_set.pop()
'o'
>>> b_set.pop()
'n'
>>> b_set
set(['p', 'qiwser', 't', 'y'])


remove（删除指定元素）
>>> a_set
set(['a', 'i', 'lin', 'qiwser'])
>>> a_set.remove('i')
>>> a_set
set(['a', 'lin', 'qiwser'])


discard（跟remove一样，指定元素删除，但如果删除的元素不存在，则什么也不操作[也不会抱错]）
>>> a_set
set(['a', 'lin', 'qiwser'])
>>> a_set.discard('a')
>>> a_set
set(['lin', 'qiwser'])


clear(清楚set中的所有元素)
>>> a_set
set(['lin', 'qiwser'])
>>> a_set.clear()
>>> a_set
set([])

del （删除set）
>>> del a_set


frozenset（创建冻结集合，即通过此参数创建的集合不可被修改）
>>> f_set = frozenset('python')
>>> f_set
frozenset(['h', 'o', 'n', 'p', 't', 'y'])


issubset(判断a是否为c的子集)
issuperset（判断a是否为c的超集）
>>> a
set(['q', 'i', 's', 'r', 'w'])
>>> c
set(['q', 'i'])
>>> c<a     #c是a的子集
True
>>> c.issubset(a)   #或者用这种方法，判断c是否是a的子集
True
>>> a.issuperset(c) #判断a是否是c的超集
True

>>> b
set(['a', 'q', 'i', 'l', 'o'])
>>> a<b     #a不是b的子集
False
>>> a.issubset(b)   #或者这样做
False



并集（使用“|” 或 union判断）
>>> a
set(['q', 'i', 's', 'r', 'e'])
>>>
>>> b
set(['a', 'q', 'i', 'l', 'o'])
>>>
>>> c
set(['q', 'i'])
>>>
>>> a | b
set(['a', 'e', 'i', 'l', 'o', 'q', 's', 'r'])
>>>
>>>
>>> a.union(b)
set(['a', 'e', 'i', 'l', 'o', 'q', 's', 'r'])

交集（使用“&”或intersection判断）
>>> a
set(['q', 'i', 's', 'r', 'e'])
>>> b
set(['a', 'q', 'i', 'l', 'o'])
>>> c
set(['q', 'i'])
>>>
>>> a&b
set(['q', 'i'])
>>> a.intersection(b)
set(['q', 'i'])


查补（使用“-” 或 difference判断）
>>> a
set(['q', 'i', 's', 'r', 'w'])
>>> b
set(['a', 'q', 'i', 'l', 'o'])
>>> a - b
set(['s', 'r', 'w'])
>>> a.difference(b)
set(['s', 'r', 'w'])


对称差集[获取交集外的元素](使用“^”或symmetric_difference判断)
>>> a
set(['q', 'i', 's', 'r', 'w'])
>>> b
set(['a', 'q', 'i', 'l', 'o'])
>>> a.symmetric_difference(b)
set(['a', 'l', 'o', 's', 'r', 'w'])
>>> a^b
set(['a', 'l', 'o', 's', 'r', 'w'])



运算符

运算符	         描述	                           实例
==	      等于 - 比较对象是否相等	              (a == b) 返回 False。
!=	      不等于 - 比较两个对象是否不相等	      (a != b) 返回 true.
>	      大于 - 返回x是否大于y	                  (a > b) 返回 False。
<	      小于 - 返回x是否小于y	                  (a < b) 返回 true。
>=	      大于等于 - 返回x是否大于等于y。	      (a >= b) 返回 False。
<=	      小于等于 - 返回x是否小于等于y。	      (a <= b) 返回 true。


运算符	               描述	                                                         实例
and	        布尔"与" - 如果x为False，x and y返回False，否则它返回y的计算值。	(a and b) 返回 true。
or	        布尔"或" - 如果x是True，它返回True，否则它返回y的计算值。	        (a or b) 返回 true。
not	        布尔"非" - 如果x为True，返回False。如果x为False，它返回True。	    not(a and b) 返回 false。




file
模式	描述
r	以读方式打开文件，可读取文件信息。
w	以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容
a	以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建
r+	以读写方式打开文件，可对文件进行读和写操作。
w+	消除文件内容，然后以读写方式打开文件。
a+	以读写方式打开文件，并把文件指针移到文件尾。
b	以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。


>>> with open("130.txt","a") as f:
...     f.write("\nThis is about 'with...as...'")
... 
>>> with open("130.txt","r") as f:
...     print f.read()
... 
learn python
http://qiwsir.github.io
qiwsir@gmail.com
hello

This is about 'with...as...'
>>> 


read：如果指定了参数size，就按照该指定长度从文件中读取内容，否则，就读取全文。被读出来的内容，全部塞到一个字符串里面。这样有好处，就是东西都到内存里面了，随时取用，比较快捷；“成也萧何败萧何”，也是因为这点，如果文件内容太多了，内存会吃不消的。文档中已经提醒注意在“non-blocking”模式下的问题，关于这个问题，不是本节的重点，暂时不讨论。
readline：那个可选参数size的含义同上。它则是以行为单位返回字符串，也就是每次读一行，依次循环，如果不限定size，直到最后一个返回的是空字符串，意味着到文件末尾了(EOF)。
readlines：size同上。它返回的是以行为单位的列表，即相当于先执行readline()，得到每一行，然后把这一行的字符串作为列表中的元素塞到一个列表中，最后将此列表返回。

read示例：
>>> f = open("you.md")
>>> content = f.read()
>>> content
'You Raise Me Up \nWhen I am down and, oh my soul, so weary;\nWhen troubles come and my heart burdened be; \nThen, I am still and wait here in the silence, Until you come and sit awhile with me. \nYou raise me up, so I can stand on mountains; \nYou raise me up, to walk on stormy seas; \nI am strong, when I am on your shoulders; \nYou raise me up: To more than I can be.\n'


readline示例：(如果文件太大，选择readline)
>>> f = open("you.md")
>>> f.readline()
'You Raise Me Up \n'
>>> f.readline()
'When I am down and, oh my soul, so weary;\n'
>>> f.readline()
'When troubles come and my heart burdened be; \n'
>>> f.readline()
'Then, I am still and wait here in the silence, Until you come and sit awhile with me. \n'
>>> f.readline()
'You raise me up, so I can stand on mountains; \n'
>>> f.readline()
'You raise me up, to walk on stormy seas; \n'
>>> f.readline()
'I am strong, when I am on your shoulders; \n'
>>> f.readline()
'You raise me up: To more than I can be.\n'


readlines示例：
>>> f = open("you.md")
>>> content = f.readlines()
>>> content
['You Raise Me Up \n', 'When I am down and, oh my soul, so weary;\n', 'When troubles come and my heart burdened be; \n', 'Then, I am still and wait here in the silence, Until you come and sit awhile with me. \n', 'You raise me up, so I can stand on mountains; \n', 'You raise me up, to walk on stormy seas; \n', 'I am strong, when I am on your shoulders; \n', 'You raise me up: To more than I can be.\n']


fileinput示例：
>>> import fileinput
>>> for line in fileinput.input("you.md"):
...     print line ,
... 
You Raise Me Up
When I am down and, oh my soul, so weary;
When troubles come and my heart burdened be;
Then, I am still and wait here in the silence,
Until you come and sit awhile with me.
You raise me up, so I can stand on mountains;
You raise me up, to walk on stormy seas;
I am strong, when I am on your shoulders;
You raise me up: To more than I can be.



seek（文件中的指针，以字节为单位）
>>> f = open("you.md")
>>> f.readline()
'You Raise Me Up \n'
>>> f.readline()
'When I am down and, oh my soul, so weary;\n'   #已经读取到第二行了
>>> f.seek(0)      #调到文件第一行的第一个字节	


tell（查看seek指定位置）
>>> f.seek(4)
>>> f.tell()
4





迭代

>>> lst = ['g','i','t','h','u','b']
>>> for i in lst:
...     print i,
... 
g i t h u b
>>> lst_iter = iter(lst)   #对原来的list实施了一个iter()
>>> 
>>> lst_iter.next()
'g'
>>> lst_iter.next()
'i'
>>> lst_iter.next()
't'
>>> lst_iter.next()
'h'
>>> lst_iter.next()
'u'
>>> lst_iter.next()
'b'
>>> lst_iter.next()

>>> [ line for line in open('208.txt') ]
['Learn python with qiwsir.\n', 'There is free python course.\n', 'The website is:\n', 'http://qiwsir.github.io\n', 'Its language is Chinese.\n']

>>> list(open('208.txt'))
['Learn python with qiwsir.\n', 'There is free python course.\n', 'The website is:\n', 'http://qiwsir.github.io\n', 'Its language is Chinese.\n']

>>> tuple(open('208.txt'))
('Learn python with qiwsir.\n', 'There is free python course.\n', 'The website is:\n', 'http://qiwsir.github.io\n', 'Its language is Chinese.\n')

>>> "$$$".join(open('208.txt'))
'Learn python with qiwsir.\n$$$There is free python course.\n$$$The website is:\n$$$http://qiwsir.github.io\n$$$Its language is Chinese.\n'

>>> a,b,c,d,e = open("208.txt")
>>> a
'Learn python with qiwsir.\n'
>>> b
'There is free python course.\n'
>>> c
'The website is:\n'
>>> d
'http://qiwsir.github.io\n'
>>> e
'Its language is Chinese.\n'



函数
函数名的命名规则要符合python中的命名要求。一般用小写字母和单下划线、数字等组合
def是定义函数的关键词，这个简写来自英文单词define
函数名后面是圆括号，括号里面，可以有参数列表，也可以没有参数
千万不要忘记了括号后面的冒号
函数体（语句块），相对于def缩进，按照python习惯，缩进四个空格

>>> def name():
...     print "lin"
... 
>>> name()
lin
>>> def add(x,y):
...     return x+y
... 
>>> add(2,3)
5


*args(名称可以变,但"*"符合一定要存在)
>>> def foo(x,*args):
...     print "x:",x
...     print "tuple:",args
... 
>>> 
>>> foo(7)
x: 7
tuple: ()
>>> foo(7,)
x: 7
tuple: ()

* & ** 使用介绍
>>> def foo(x,y,z,*args,**kargs):
...     print x
...     print y
...     print z
...     print args
...     print kargs
... 
>>> 
>>> foo('lin',2,'python')
lin
2
python
()
{}
>>> 
>>> foo(1,2,3,4,5,)
1
2
3
(4, 5)
{}
>>> 
>>> foo(1,2,3,4,5,name='lin')
1
2
3
(4, 5)
{'name': 'lin'}



>>> def add(x,y):
...     return x + y
... 
>>> add(2,3)
5
>>> bars = (2,3)
>>> add(*bars)
5



>>> def book(author,name):
...     print "%s is writing %s" %(author,name)
... 
>>> bar = {"name":"Starter learning Python","author":"Kivi"}
>>> book(**bar)
Kivi is writing Starter learning Python


函数综合传值方式

>>> def foo(x,y=2,*targs,**dargs):
...     print "x==>",x
...     print "y==>",y
...     print "targs_tuple==>",targs
...     print "dargs_dict==>",dargs
... 

>>> foo("1x")
x==> 1x
y==> 2
targs_tuple==> ()
dargs_dict==> {}

>>> foo("1x","2y")
x==> 1x
y==> 2y
targs_tuple==> ()
dargs_dict==> {}

>>> foo("1x","2y","3t1","3t2")
x==> 1x
y==> 2y
targs_tuple==> ('3t1', '3t2')
dargs_dict==> {}

>>> foo("1x","2y","3t1","3t2",d1="4d1",d2="4d2")
x==> 1x
y==> 2y
targs_tuple==> ('3t1', '3t2')
dargs_dict==> {'d2': '4d2', 'd1': '4d1'}


lambda

>>> lam = lambda x:x+3
>>> n2 = []
>>> for i in numbers:
...     n2.append(lam(i))
... 
>>> n2
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


>>> g = lambda x,y:x+y  #x+y,并返回结果
>>> g(3,4)
7
>>> (lambda x:x**2)(4)  #返回4的平方
16


>>> lamb = [ lambda x:x,lambda x:x**2,lambda x:x**3,lambda x:x**4 ]
>>> for i in lamb:
...     print i(3),
... 
3 9 27 81



map
map()是python的一个内置函数，它的基本样式是：map(func,seq)
func是一个函数，seq是一个序列对象。在执行的时候，序列对象中的每个元素，按照从左到右的顺序，依次被取出来，并塞入到func那个函数里面，并将func的返回值依次存到一个list中。

>>> numbers
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]      #把列表中每一项都加3

>>> map(add,numbers)                #add(x)是上面讲述的那个函数，但是这里只引用函数名称即可
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

>>> map(lambda x: x+3,numbers)      #用lambda当然可以啦
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


>>> items = [1,2,3,4,5]
>>> squared = []
>>> for i in items:
...     squared.append(i**2)
... 
>>> squared
[1, 4, 9, 16, 25]

>>> def sqr(x): return x**2
... 
>>> map(sqr,items)
[1, 4, 9, 16, 25]

>>> map(lambda x: x**2, items)
[1, 4, 9, 16, 25]

>>> [ x**2 for x in items ]     #这个我最喜欢了，一般情况下速度足够快，而且可读性强
[1, 4, 9, 16, 25]


>>> lst1 = [1,2,3,4,5]
>>> lst2 = [6,7,8,9,0]
>>> map(lambda x,y: x+y, lst1,lst2)     #将两个列表中的对应项加起来，并返回一个结果列表
[7, 9, 11, 13, 5]


>>> lst1 = [1,2,3,4,5]
>>> lst2 = [6,7,8,9,0]
>>> lst3 = [7,8,9,2,1]
>>> map(lambda x,y,z: x+y+z, lst1,lst2,lst3)
[14, 17, 20, 15, 6]



reduce(python3需要用from functools import reduce引入)

>>> reduce(lambda x,y: x+y,[1,2,3,4,5])
15



>>> a
[3, 9, 8, 5, 2]
>>> b
[1, 4, 9, 2, 6]

>>> zip(a,b)        #复习一下zip，下面的方法中要用到
[(3, 1), (9, 4), (8, 9), (5, 2), (2, 6)]

>>> sum(x*y for x,y in zip(a,b))    #解析后直接求和
133

>>> new_list = [x*y for x,y in zip(a,b)]    #可以看做是上面方法的分布实施

>>> #这样解析也可以：new_tuple = (x*y for x,y in zip(a,b))
>>> new_list
[3, 36, 72, 10, 12]
>>> sum(new_list)     #或者:sum(new_tuple)
133

>>> reduce(lambda sum,(x,y): sum+x*y,zip(a,b),0)    #这个方法是在耍酷呢吗？
133

>>> from operator import add,mul            #耍酷的方法也不止一个
>>> reduce(add,map(mul,a,b))
133

>>> reduce(lambda x,y: x+y, map(lambda x,y: x*y, a,b))  #map,reduce,lambda都齐全了，更酷吗？
133


filter

>>> numbers
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> numbers = range(-5,5)
>>> numbers
[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]
>>> 
>>> filter(lambda x: x>0,numbers)
[1, 2, 3, 4]
>>> 
>>> [x for x in numbers if x > 0]
[1, 2, 3, 4]
>>> filter(lambda c: c!='h', 'python')
'pyton'
>>> filter(lambda c: c!='h', 'pytHon')
'pytHon'